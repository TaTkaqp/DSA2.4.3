name: Deploy to GitHub Pages on Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-content

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get release version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Prepare deployment
        run: |
          mkdir -p build
          # Копируем существующее содержимое gh-pages (предыдущие версии)
          if [ -d "gh-pages-content" ]; then
            cp -r gh-pages-content/* build/ || true
          fi
          
          # Создаем папку для новой версии и копируем туда файлы
          mkdir -p build/v${{ steps.get_version.outputs.version }}
          cp -r ./ru ./en ./index.html ./build/v${{ steps.get_version.outputs.version }}/
          
          # Копируем файлы для актуальной версии
          cp -r ./ru ./en ./index.html ./build/

      - name: Generate versions list
        id: generate_versions
        run: |
          # Находим все папки с версиями, сортируем по версии в обратном порядке
          VERSIONS=$(find build -maxdepth 1 -name "v*" -type d | sort -Vr)
          VERSION_NAMES=""
          for dir in $VERSIONS; do
            if [ -n "$dir" ] && [ "$dir" != "build" ]; then
              version_name=$(basename "$dir")
              if [ -n "$VERSION_NAMES" ]; then
                VERSION_NAMES="$VERSION_NAMES $version_name"
              else
                VERSION_NAMES="$version_name"
              fi
            fi
          done
          
          echo "Found versions: $VERSION_NAMES"
          echo "versions=$VERSION_NAMES" >> $GITHUB_OUTPUT

      - name: Update main page with versions list
        run: |
          # Создаем временный файл с обновленным содержимым
          TEMP_FILE=$(mktemp)
          
          # Читаем существующий index.html и добавляем список версий перед закрывающим тегом body
          awk -v versions="${{ steps.generate_versions.outputs.versions }}" '
          /<\/body>/ {
              # Генерируем HTML для списка версий
              print "    <h2>Доступные версии сайта:</h2>"
              print "    <ul>"
              print "      <li><a href=\"./\">Текущая версия (последняя)</a></li>"
              
              # Разбиваем строку с версиями на массив
              split(versions, version_arr, " ")
              for (i in version_arr) {
                  version = version_arr[i]
                  if (version != "") {
                      print "      <li><a href=\"" version "/\">Версия " version "</a></li>"
                  }
              }
              
              print "    </ul>"
          }
          { print }
          ' build/index.html > "$TEMP_FILE"
          
          # Заменяем оригинальный файл
          mv "$TEMP_FILE" build/index.html
          
          echo "Main page updated with versions list"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          force_orphan: false
